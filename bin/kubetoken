#!/usr/bin/env python

import argparse

import yaml
import kubetoken


def _gen_config_object(ca, account_name, token, url):
    cluster_name = 'kubernetes'
    context_name = account_name + '@' + cluster_name
    config = {
        'apiVersion': 'v1',
        'kind': 'Config',
        'preferences': {},
        'current-context': context_name,
        'contexts': [{
            'name': context_name,
            'context': {
                'cluster': cluster_name,
                'user': account_name,
            },
        }],
        'clusters': [{
            'name': cluster_name,
            'cluster': {
                'certificate-authority-data': ca,
                'server': url,
            },
        }],
        'users': [{
            'name': account_name,
            'user': {
                'token': token,
            },
        }]
    }
    return config


def _parse_args():
    parser = argparse.ArgumentParser(description='Generate new kubeconfig from existing service account')
    parser.add_argument('kubeconfig', help='The config to connect to K8s')
    parser.add_argument('account_name', help='Name of the service account')
    parser.add_argument('namespace', help='The namespace of the service account')
    parser.add_argument('token_config_path', help='The output file path')
    args = parser.parse_args()
    return \
        args.kubeconfig, args.account_name, \
        args.namespace, args.token_config_path


def main():
    config_path, account_name, namespace, token_config_path = \
        _parse_args()

    print('Get token from K8s...')
    ca, token = kubetoken.get_secret(config_path, account_name, namespace)
    url = kubetoken.get_server_url(config_path)

    print('Token found. Generating new kubeconfig...')
    config = _gen_config_object(ca, account_name, token, url)
    with open(token_config_path, 'w') as output_file:
        yaml.dump(config, output_file)

    print('Completed. Output path: {}'.format(token_config_path))


if __name__ == "__main__":
    main()
